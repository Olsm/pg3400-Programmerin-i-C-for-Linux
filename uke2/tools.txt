And this is where we try various tools

Goals:

- Get your hands dirty with gdb and valgrind

Tasks:

-Download code.tar.gz from the same directory
  wget http://home.nith.no/~raakje/pg3400/code.tar.gz
-extract the files from the folder
  tar xf code.tar.gz code
-inspect the make file
  cat code/Makefile
  Specifies cc=gcc, some c flags and clean
-file "2" was generated by compiling- any ideas on how to run it?
	-hint : permissions
  add execute permission: chmod +x 2
  run the file: ./2
-use make with target
  make 2
-make clean to keep the source directory clean
  make clean
-run the program 1 - any errors?
  ./1
  No error
-run with valgrind - problems?
  valgrind ./1.c
    memory leak: definitely lost: 40 bytes in 1 blocks
-run the program 2 - any errors?
  Segmentation fault (core dumped)
-how should you find the error?
  gcc -Wall 2.c -o 2
    2.c:13:13: warning: variable ‘beta’ set but not used [-Wunused-but-set-variable] int alpha, beta;
-check if the memory is doing ok?
  Run with valgrind
  valgrind ./2  
    Invalid write of size 1
      at 0x400514: randomFunction (2.c:5)
      by 0x400553: main (2.c:15)
    Address 0x5 is not stack'd, malloc'd or (recently) free'd
    Process terminating with default action of signal 11 (SIGSEGV)
      Access not within mapped region at address 0x5
        at 0x400514: randomFunction (2.c:5)
        by 0x400553: main (2.c:15)
      If you believe this happened as a result of a stack
      overflow in your program's main thread (unlikely but
      possible), you can try to increase the size of the
      main thread stack using the --main-stacksize= flag.
      The main thread stack size used in this run was 8388608.
-run the program 3 - any errors?
  no
-check the memory status
  All heap blocks were freed -- no leaks are possible
-add while(1) before printf in program 3
-run it now - does it return?
  No, it prints entering main again and again in endless loop
- stop the program:
	- using ctrl+c, ctrl+z
	- looking for pid and using kill
           top
             find pid of program in list
             or use command: pidof 3
           kill -9 pid
-Take program 1 and run it through the various steps of compiling	
  -preprocessing
    The C preprocessor, often known as cpp, is a macro processor that is used automatically by the C compiler to transform a C program before compilation.
     gcc -E 1.c -o 1.i
  -compiling
    The next stage of the process is the actual compilation of the preprocessed source code to assembly language, 
    for a specific processor (Depending upon the target processor architecture the source code is converted into particular assembly language 
    and it can be known as cross-compilation).
     gcc -S 1.i -o 1.s
  -assembling	
    We know that MACHINES (i.e. a computer) can understand only Machine-Level Code. So we require an ASSEMBLER that converts assembly code 
    in "hello.s" file into machine code. Eventhough it is a straightforward one-to-one mapping of assembly language statements 
    to their machine language counterparts, it is tedious and error-prone if done manually.
     gcc -c 1.c
  -linker
    The final stage of the compilation process is producing a single executable program file by linking set of object files
     gcc 1.o
       This links the object file ‘hello.o’ to the C standard library, and produces an executable file ‘a.out’.
     mv a.out 1
     ./1
       The program runs!
